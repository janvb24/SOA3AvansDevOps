@startuml

package "Notifications" {
    ' Strategy pattern
    interface ISendNotificationStrategy {
        + Send(): void
    }
    Class EmailSendNotificationStrategy
    Class SmsSendNotificationStrategy

    'Adaptor pattern
    Class SmsSendNotificationAdapter
    Class EmailSendNotificationAdapter
    Class EmailLibrary
    Class SmsLibrary

    interface INotificationService {

    }
    Class NotificationService

    
    ' Relations
    EmailSendNotificationStrategy ..|> ISendNotificationStrategy
    SmsSendNotificationStrategy ..|> ISendNotificationStrategy
    SmsSendNotificationAdapter <-- SmsSendNotificationStrategy 
    EmailSendNotificationAdapter <-- EmailSendNotificationStrategy
    EmailLibrary <-- EmailSendNotificationAdapter
    SmsLibrary <-- SmsSendNotificationAdapter

    NotificationService ..|> INotificationService
    NotificationService --> ISendNotificationStrategy
}

package "DevOps" {
    package "PipeLine" {
        'Composite pattern
        abstract Component{
            + {abstract} Operation(): void
            + {abstract} Accept(visitor: Visitor): void
        }

        Class Composite{
            + Add(): void
            + Remove(): void
            + GetChild(): void
        }

        'Compisites
        interface IPipeline
        Class Pipeline {
            - notificationService: INotificationService
            + Pipeline(notificationService: INotificationService)
        }
        Pipeline ..|> IPipeline
        IPipeline --|> Composite
        
        'Leaves
        interface IDeployAction {
            + Deploy(): void
        }
        Class AzureDeployAction
        Class CustomDeployAction
        AzureDeployAction ..|> IDeployAction
        CustomDeployAction ..|> IDeployAction

        interface ISourceAction 
        Class GitSourceAction
        GitSourceAction ..|> ISourceAction
        ISourceAction --|> Component

        interface IPackageAction 
        Class NpmPackageAction
        Class NugetPackageAction
        Class MavenPackageAction
        NpmPackageAction ..|> IPackageAction
        NugetPackageAction ..|> IPackageAction
        MavenPackageAction ..|> IPackageAction
        IPackageAction --|> Component

        interface IBuildAction
        Class DotNetBuildAction
        Class DotNetCoreBuildAction
        Class MavenBuildAction
        Class AntBuildAction
        Class JenkinsBuildAction
        DotNetBuildAction ..|> IBuildAction
        DotNetCoreBuildAction ..|> IBuildAction
        MavenBuildAction ..|> IBuildAction
        AntBuildAction ..|> IBuildAction
        JenkinsBuildAction ..|> IBuildAction        
        IBuildAction --|> Component
        
        interface ITestAction
        Class RunTestAction
        Class PublishTestResultAction
        Class PublishCodeCoverageResultAction
        RunTestAction ..|> ITestAction
        PublishTestResultAction ..|> ITestAction
        PublishCodeCoverageResultAction ..|> ITestAction
        ITestAction --|> Component

        interface IAnalysisAction
        Class SonarqubeAnalysisAction
        SonarqubeAnalysisAction ..|> IAnalysisAction
        IAnalysisAction --|> Component

        interface IUtilityAction
        Class BatchUtilityAction
        Class CmdUtilityAction
        Class FilesCopyAction
        Class FilesDeleteAction
        Class FilesDownloadAction
        BatchUtilityAction ..|> IUtilityAction
        CmdUtilityAction ..|> IUtilityAction
        FilesCopyAction ..|> IUtilityAction
        FilesDeleteAction ..|> IUtilityAction
        FilesDownloadAction ..|> IUtilityAction        
        IUtilityAction --|> Component

        'Relations
        Composite --|> Component
        Component --> Composite
        IDeployAction --|> Component

        'Visitor pattern
        interface IPipelineVisitor{
            + VisitPipeline(Pipeline: IPipeline)
            + VisitSourceAction(Action: ISourceAction)                
            + VisitPackageAction(Action: IPackageAction)                
            + VisitBuildAction(Action: IBuildAction)                
            + VisitTestAction(Action: ITestAction)                
            + VisitAnalysisAction(Action: ISourceAction)                
            + VisitUtilityAction(Action: IUtilityAction)                
        }
        IPipelineVisitor .. Component
    }


    'Pipeline Builder (Builder pattern)
    interface IPipelineBuilder
    Class DeployPipelineBuilder
    Class CustomPipelineBuilder
    Class PipelineDirector {
        - builder: IPipelineBuilder
        + PipelineDirector(builder: IPipelineBuilder)
        + make(): IPipeline
    }
    DeployPipelineBuilder ..|> IPipelineBuilder
    CustomPipelineBuilder ..|> IPipelineBuilder
    PipelineDirector --> IPipelineBuilder
    DeployPipelineBuilder --> Component
    CustomPipelineBuilder --> Component
}

package "VersionControl" {
    interface IGitVersionControl {
        + Branch()
        + Commit()
        + Fetch()
        + Push()
    }
    Class GitVersionControl
    interface IGitVersionControlAction
    Class PushGitVersionControlAction
    Class FetchGitVersionControlAction
    Class CommitGitVersionControlAction
    Class BranchGitVersionControlAction
    

    'Relations
    IGitVersionControl <|.. GitVersionControl
    IGitVersionControlAction <-- GitVersionControl
    PushGitVersionControlAction ..|> IGitVersionControlAction
    FetchGitVersionControlAction ..|> IGitVersionControlAction
    CommitGitVersionControlAction ..|> IGitVersionControlAction
    BranchGitVersionControlAction ..|> IGitVersionControlAction
}

package "ProjectManagementSystem" {
    'State pattern (Sprints) TODO statediagram
    interface ISprintState
    Class CreatedSprintState
    Class DoingSprintState
    Class FinishedSprintState{
        - notificationService: INotificationService
        + FinishedSprintState(notificationService: INotificationService)
    }
    Class ClosedSprintState

    CreatedSprintState ..|> ISprintState
    DoingSprintState ..|> ISprintState
    FinishedSprintState ..|> ISprintState
    ClosedSprintState ..|> ISprintState

    abstract Sprint {
        - state: ISprintState
        - pipeline: IPipeline
        - director: PipelineDirector
        + Sprint(director: PipelineDirector)
        + ChangeState(state: ISprintState)
    }

    Class ReviewSprint
    Class ReleaseSprint
    ReviewSprint --|> Sprint
    ReleaseSprint --|> Sprint
    Sprint --> ISprintState

    Class Backlog
    Sprint --> Backlog

    Class Project {
        - versionControl: IGitVersionControl
        + Project(versionControl: IGitVersionControl)
    }
    Project --> Backlog
    Project --> Sprint

    abstract BacklogItem {
        - state: IBacklogItemState
        + ChangeState(state: IBacklogItemState)
    }
    class EditableBacklogItem {
        + EditableBacklogItem (backlogItem: NonEditableBackLogItem)
    }
    class NonEditableBackLogItem {
        + NonEditableBackLogItem (backlogItem: EditableBacklogItem)
    }
    BacklogItem <-- Backlog
    BacklogItem <-- BacklogItem
    EditableBacklogItem --|> BacklogItem
    NonEditableBackLogItem --|> BacklogItem
    BacklogItem --> IBacklogItemState

   'State pattern (BacklogItem) TODO statediagram
    interface IBacklogItemState
    Class TodoBacklogItemState
    Class DoingBacklogItemState {
        - notificationService: INotificationService
        + DoingBacklogItemState(notificationService: INotificationService)
    }
    Class ReadyForTestingBacklogItemState
    Class TestingBacklogItemState {
        - notificationService: INotificationService
        + TestingBacklogItemState(notificationService: INotificationService)
    }
    class TestedBacklogItemState
    Class DoneBacklogItemState
    TodoBacklogItemState ..|> IBacklogItemState
    DoingBacklogItemState ..|> IBacklogItemState
    ReadyForTestingBacklogItemState ..|> IBacklogItemState
    TestingBacklogItemState ..|> IBacklogItemState
    TestedBacklogItemState ..|> IBacklogItemState
    DoneBacklogItemState ..|> IBacklogItemState

    class User
    User <-- Project
    User <-- BacklogItem
    User <-- Sprint
    User <-- ForumTread
    User <-- ForumTreadItem

    Class Forum 
    Class ForumTread {
        - notificationService: INotificationService
        + ForumTread(notificationService: INotificationService)
    }
    Class ForumTreadItem
    Forum --> Project
    ForumTread --> Forum
    ForumTread --> BacklogItem
    ForumTread -- ForumTreadItem
    ForumTreadItem --> ForumTreadItem

    Class Report
    Class ReportTemplate
    Report --> ReportTemplate
    Report --> Sprint
}
ProjectManagementSystem ..> Notifications : uses
ProjectManagementSystem ..> DevOps : uses
ProjectManagementSystem ..> VersionControl : uses
DevOps ..> Notifications : uses
@enduml
