@startuml

package "Notifications" {
    ' Strategy pattern
    interface ISendNotificationStrategy {
        + Send(): void
    }
    Class EmailSendNotificationStrategy
    Class SmsSendNotificationStrategy

    'Adaptor pattern
    Class SmsSendNotificationAdapter
    Class EmailSendNotificationAdapter
    Class EmailLibrary
    Class SmsLibrary

    interface INotificationService {

    }
    Class NotificationService

    
    ' Relations
    EmailSendNotificationStrategy ..|> ISendNotificationStrategy
    SmsSendNotificationStrategy ..|> ISendNotificationStrategy
    SmsSendNotificationAdapter <-- SmsSendNotificationStrategy 
    EmailSendNotificationAdapter <-- EmailSendNotificationStrategy
    EmailLibrary <-- EmailSendNotificationAdapter
    SmsLibrary <-- SmsSendNotificationAdapter

    NotificationService ..|> INotificationService
    NotificationService --> ISendNotificationStrategy
}

package "DevOps" {
    package "PipeLine" {
        'Composite pattern
        abstract Component{
            + {abstract} Operation(): void
            + {abstract} Accept(visitor: Visitor): void
        }

        Class Composite{
            + Add(): void
            + Remove(): void
            + GetChild(): void
        }

        'Compisites
        Class Pipeline {
            - notificationService: INotificationService
            + Pipeline(notificationService: INotificationService)
        }
        Pipeline --|> Composite
        
        'Leaves
        abstract DeployAction {
            + Deploy(): void
        }
        Class AzureDeployAction
        Class CustomDeployAction
        AzureDeployAction --|> DeployAction
        CustomDeployAction --|> DeployAction

        abstract SourceAction 
        Class GitSourceAction
        GitSourceAction --|> SourceAction
        SourceAction --|> Component

        abstract PackageAction 
        Class NpmPackageAction
        Class NugetPackageAction
        Class MavenPackageAction
        NpmPackageAction --|> PackageAction
        NugetPackageAction --|> PackageAction
        MavenPackageAction --|> PackageAction
        PackageAction --|> Component

        abstract BuildAction
        Class DotNetBuildAction
        Class DotNetCoreBuildAction
        Class MavenBuildAction
        Class AntBuildAction
        Class JenkinsBuildAction
        DotNetBuildAction --|> BuildAction
        DotNetCoreBuildAction --|> BuildAction
        MavenBuildAction --|> BuildAction
        AntBuildAction --|> BuildAction
        JenkinsBuildAction --|> BuildAction        
        BuildAction --|> Component
        
        abstract TestAction
        Class RunTestAction
        Class PublishTestResultAction
        Class PublishCodeCoverageResultAction
        RunTestAction --|> TestAction
        PublishTestResultAction --|> TestAction
        PublishCodeCoverageResultAction --|> TestAction
        TestAction --|> Component

        abstract AnalysisAction
        Class SonarqubeAnalysisAction
        SonarqubeAnalysisAction --|> AnalysisAction
        AnalysisAction --|> Component

        abstract UtilityAction
        Class BatchUtilityAction
        Class CmdUtilityAction
        Class FilesCopyAction
        Class FilesDeleteAction
        Class FilesDownloadAction
        BatchUtilityAction --|> UtilityAction
        CmdUtilityAction --|> UtilityAction
        FilesCopyAction --|> UtilityAction
        FilesDeleteAction --|> UtilityAction
        FilesDownloadAction --|> UtilityAction        
        UtilityAction --|> Component

        'Relations
        Composite --|> Component
        Component <-- Composite
        DeployAction --|> Component

        'Visitor pattern
        interface IPipelineVisitor{
            + VisitPipeline(Pipeline: Pipeline)
            + VisitSourceAction(Action: SourceAction)                
            + VisitPackageAction(Action: PackageAction)                
            + VisitBuildAction(Action: BuildAction)                
            + VisitTestAction(Action: TestAction)                
            + VisitAnalysisAction(Action: SourceAction)                
            + VisitUtilityAction(Action: UtilityAction)                
        }
        Class RunPiplineVisitor
        RunPiplineVisitor ..|> IPipelineVisitor
        IPipelineVisitor .. Component
    }


    'Pipeline Builder (Builder pattern)
    interface PipelineBuilder {
        + createPipeline(): Pipeline
    }
    Class ConcretePipelineBuilder
    Class PipelineDirector {
        - builder: PipelineBuilder
        + PipelineDirector(builder: PipelineBuilder)
    }
    ConcretePipelineBuilder ..|> PipelineBuilder
    PipelineDirector --> PipelineBuilder
    ConcretePipelineBuilder --> Component
}

package "VersionControl" {
    interface IGitVersionControl {
        + Branch()
        + Commit()
        + Fetch()
        + Push()
    }
    Class GitVersionControl
    interface IGitVersionControlAction
    Class PushGitVersionControlAction
    Class FetchGitVersionControlAction
    Class CommitGitVersionControlAction
    Class BranchGitVersionControlAction
    

    'Relations
    IGitVersionControl <|.. GitVersionControl
    IGitVersionControlAction <-- GitVersionControl
    PushGitVersionControlAction ..|> IGitVersionControlAction
    FetchGitVersionControlAction ..|> IGitVersionControlAction
    CommitGitVersionControlAction ..|> IGitVersionControlAction
    BranchGitVersionControlAction ..|> IGitVersionControlAction
}

package "ProjectManagementSystem" {
    'State pattern (Sprints) TODO statediagram
    interface ISprintState {
        + StartSprint()
        + FinishSprint()
        + CloseSprint()
    }
    Class CreatedSprintState
    Class DoingSprintState
    Class FinishedSprintState{
        - notificationService: INotificationService
        + FinishedSprintState(notificationService: INotificationService)
    }
    Class ClosedSprintState

    CreatedSprintState ..|> ISprintState
    DoingSprintState ..|> ISprintState
    FinishedSprintState ..|> ISprintState
    ClosedSprintState ..|> ISprintState

    abstract Sprint {
        - state: ISprintState
        - pipeline: Pipeline
        - director: PipelineDirector
        + Sprint(director: PipelineDirector)
        + ChangeState(state: ISprintState)
    }

    Class ReviewSprint
    Class ReleaseSprint
    ReviewSprint --|> Sprint
    ReleaseSprint --|> Sprint
    Sprint --> ISprintState

    Class Backlog
    Sprint --> Backlog

    Class Project {
        - versionControl: IGitVersionControl
        + Project(versionControl: IGitVersionControl)
    }
    Project --> Backlog
    Project --> Sprint

    abstract BacklogItem {
        - state: IBacklogItemState
        + ChangeState(state: IBacklogItemState)
    }
    class EditableBacklogItem {
        + EditableBacklogItem (backlogItem: NonEditableBackLogItem)
    }
    class NonEditableBackLogItem {
        + NonEditableBackLogItem (backlogItem: EditableBacklogItem)
    }
    BacklogItem <-- Backlog
    BacklogItem <-- BacklogItem
    EditableBacklogItem --|> BacklogItem
    NonEditableBackLogItem --|> BacklogItem
    BacklogItem --> IBacklogItemState

   'State pattern (BacklogItem) TODO statediagram
    interface IBacklogItemState {
        + Start()
        + Complete()
        + Deny()
        + Approve()
    }
    Class TodoBacklogItemState
    Class DoingBacklogItemState {
        - notificationService: INotificationService
        + DoingBacklogItemState(notificationService: INotificationService)
    }
    Class ReadyForTestingBacklogItemState
    Class TestingBacklogItemState {
        - notificationService: INotificationService
        + TestingBacklogItemState(notificationService: INotificationService)
    }
    class TestedBacklogItemState
    Class DoneBacklogItemState
    TodoBacklogItemState ..|> IBacklogItemState
    DoingBacklogItemState ..|> IBacklogItemState
    ReadyForTestingBacklogItemState ..|> IBacklogItemState
    TestingBacklogItemState ..|> IBacklogItemState
    TestedBacklogItemState ..|> IBacklogItemState
    DoneBacklogItemState ..|> IBacklogItemState

    class User
    User <-- Project
    User <-- BacklogItem
    User <-- Sprint
    User <-- ForumTread
    User <-- ForumTreadItem

    Class Forum 
    Class ForumTread {
        - notificationService: INotificationService
        + ForumTread(notificationService: INotificationService)
    }
    Class ForumTreadItem
    Forum --> Project
    ForumTread --> Forum
    ForumTread --> BacklogItem
    ForumTread -- ForumTreadItem
    ForumTreadItem --> ForumTreadItem

    Class Report
    Class ReportTemplate
    Report --> ReportTemplate
    Report --> Sprint
}
ProjectManagementSystem ..> Notifications : uses
ProjectManagementSystem ..> DevOps : uses
ProjectManagementSystem ..> VersionControl : uses
DevOps ..> Notifications : uses
@enduml
